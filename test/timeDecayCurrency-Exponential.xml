<?xml version="1.0"?>
<digitalAssetContract version="2.1">

<entity shortname="PUREMoneySystems.com"
 longname="PUREMoneySystems.com"
 email="puremoneysystems@gmail.com"/>

<issue company="PUREMoneySystems.com"
 email="puremoneysystems@gmail.com"
 contractUrl="https://localhost/contracts/"
 type="currency"/>

<currency name="time Decay Currency" tla="TDC" symbol="." type="decimal" factor="1" decimal_power="0" fraction="mTDC" />

<scriptableContract
 numBylaws="1" >

<bylaw
 name="Time_Decay_Bylaw"
 numVariables="2"
 numClauses="1"
 numHooks="0"
 numCallbacks="0"
 language="chai" >

<variable
 name="End_Date"
 value="1432100006"
 type="integer"
 access="constant" />

<variable
 name="Start_Date"
 value="1429508006"
 type="integer"
 access="constant" />

<clause
 name="Get_Computed_Balance">
  try{	    
    var currentBalance = (Current_Balance.to_string()).to_double();
    print("currentBalance = ${currentBalance}");    
    
    //Determine the total time this currency is valid for
    var totalTimeSpanInSeconds = ((End_Date - Start_Date).to_string()).to_double();
    print("totalTimeSpanInSeconds = ${totalTimeSpanInSeconds}");
    if(totalTimeSpanInSeconds &lt; 0){
      print("Error during Get_Computed_Balance. End_Date and Start_Date must be specified in seconds.  The specified End_Date is before Start_Date.");    
      return "0";
    }
    
    //Determine the remaining time this currency is valid for
    var remainingTimeSpanInSeconds = ((End_Date - (get_time()).to_int()).to_string()).to_double();
    print("remainingTimeSpanInSeconds = ${remainingTimeSpanInSeconds}");
    if(remainingTimeSpanInSeconds &lt;= 0){	  
      print("This currency is not valid. The End_Date is in the past.");     
      return "0";
    }
    
    //Determine the elapsed time this currency has been valid for
    var elapsedTimeSpanInSeconds = totalTimeSpanInSeconds - remainingTimeSpanInSeconds;
    print("elapsedTimeSpanInSeconds = ${elapsedTimeSpanInSeconds}");
    if(elapsedTimeSpanInSeconds &lt;= 0){	 
      print("This currency is not valid yet. The Start_Date is in the future.");     
      return "0";
    }
	    
    //EQUATION	Computed_Balance	= Current_Balance	- exp(elapsedTime	/ totalTime)	* ln(Current_Balance)
    //Example:	98.9820743702   	= 100 			- exp(10000	 	/ 2592000) 	* ln(100) 
	  
    //Compute the remaining balance
    var naturalLogOfCurrentBalance = (ln(currentBalance.to_string())).to_double();
    print("naturalLogOfCurrentBalance = ${naturalLogOfCurrentBalance}");    
    var elapseTimeRatio = (elapsedTimeSpanInSeconds / totalTimeSpanInSeconds);
    print("elapseTimeRatio = ${elapseTimeRatio}");    
    var exponentialForElapsedTimeRatio = (exp( elapseTimeRatio.to_string() )).to_double();
    print("exponentialForElapsedTimeRatio = ${exponentialForElapsedTimeRatio}");
    var computedBalance = currentBalance - (exponentialForElapsedTimeRatio * naturalLogOfCurrentBalance);    
    print("computedBalance = ${computedBalance}");
    return computedBalance.to_string();
    
  }catch(e){
    print("Error during Get_Computed_Balance clause: ${e}");    
    return "0";
  }
	
</clause>

</bylaw>

</scriptableContract>

<!-- CONDITIONS -->

<condition name="audit">
        No audits performed on this currency's use or distribution
    </condition>

<condition name="backing">
        No implicit or explicit backing for this currency
    </condition>

<condition name="buyback">
        PUREMoneySystems provides no backing or buyback option for this currency. 
    </condition>

<condition name="liability">
        PUREMoneySystems will provide no liability for the use, distribution, or transmission of this currency.  This is a test and is not intended to represent or perform like a real-world currency
    </condition>

<condition name="mint">
        PUREMoneySystems serves as the mint for this currency, when directed to issue or withdraw some currency to an account by the Issuer
    </condition>

<condition name="privacy">
        PUREMoneySystems uses Open Transactions to manage all transactions with this currency.  Open Transactions does not record transactions, but the LastFlag application does.  Security at multiple layers is considered, but this should not be relied on.  As a test, assume all data is public, all the time.
    </condition>

<condition name="purchase">
        This currency is given to others as gifts.  No initial purchase is required to recieve this currency.
    </condition>

<condition name="rate">
        Issuance and redemption of this currency will be performed at no charge
    </condition>

<condition name="redemption">
        PUREMoneySystems.com, nor anyone else using the LastFlag system, will redeem this currency for another asset.  This is a test only.
    </condition>

</digitalAssetContract>